datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String            @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          UserRole          @default(USER)
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  journals      Journal[]
  userData      UserJournalData[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Journal {
  id             String   @id @default(cuid())
  symbolName     String
  tradeRationale String
  tradeType      String
  date           DateTime
  notes          String
  quantity       Int
  price          Float
  takeProfit     Float
  stopLoss       Float
  emotions       String[]
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserJournalData {
  id              String   @id @default(cuid())
  profit          Float
  loss            Float
  noofJournal     Int
  noOfProfit      Int      @default(0)
  noOfLoss        Int      @default(0)
  totalQuantity   Int
  totalMoneySpent Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
